name: Build and Release Docker Manager (APK + AAB with Environment Management)

on:
  push:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Clone envs repository and setup environment files
        env:
          PAT: ${{ secrets.PAT }}
        run: |
          set -euo pipefail
          if [ -z "${PAT:-}" ]; then
            echo "ERROR: Set repository secret PAT for accessing envs repo." >&2
            exit 1
          fi
          
          git clone https://${PAT}@github.com/theSoberSobber/envs.git envs-repo
          echo "âœ… Successfully cloned envs repository"
          
          python3 -m pip install --upgrade pip
          python3 -m pip install pyyaml
          
          chmod +x envs-repo/init_env_vars.sh
          envs-repo/init_env_vars.sh .github/CD.yml
          
          if [ -f "envs-repo/docker_manager_app/copy.sh" ]; then
            chmod +x envs-repo/docker_manager_app/copy.sh
            envs-repo/docker_manager_app/copy.sh .
          fi
          echo "âœ… Environment setup complete"
          
          echo "âœ… Files at root:"
          ls -lah
          
          echo "âœ… Removing envs-repo:"
          rm -rf envs-repo
      
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: gradle
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'  # Use your Flutter version
          channel: 'stable'
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Analyze code
        run: flutter analyze
      
      - name: Run tests
        run: flutter test
      
      - name: Generate version name
        id: version
        run: echo "VERSION_NAME=$(date +'%Y.%m.%d.%H%M')" >> $GITHUB_OUTPUT
      
      # --- Build APK ---
      - name: Build Release APK
        run: flutter build apk --release
      
      - name: Rename APK
        run: |
          mv build/app/outputs/flutter-apk/app-release.apk \
             build/app/outputs/flutter-apk/DockerManager-${{ steps.version.outputs.VERSION_NAME }}.apk
      
      # --- Build AAB ---
      - name: Build Release AAB
        run: flutter build appbundle --release
      
      - name: Rename AAB
        run: |
          mv build/app/outputs/bundle/release/app-release.aab \
             build/app/outputs/bundle/release/DockerManager-${{ steps.version.outputs.VERSION_NAME }}.aab
      
      # --- Upload as artifacts ---
      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: DockerManager-APK-${{ steps.version.outputs.VERSION_NAME }}
          path: build/app/outputs/flutter-apk/DockerManager-${{ steps.version.outputs.VERSION_NAME }}.apk
          retention-days: 7
      
      - name: Upload AAB as artifact
        uses: actions/upload-artifact@v4
        with:
          name: DockerManager-AAB-${{ steps.version.outputs.VERSION_NAME }}
          path: build/app/outputs/bundle/release/DockerManager-${{ steps.version.outputs.VERSION_NAME }}.aab
          retention-days: 7
      
      # --- GitHub Release ---
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.VERSION_NAME }}
          name: Docker Manager v${{ steps.version.outputs.VERSION_NAME }}
          body: |
            Automated Flutter build created on $(date)
            
            Changes in this build:
            - Latest commit: ${{ github.event.head_commit.message }}
            - Branch: ${{ github.ref_name }}
            
            ðŸ“± **Android Downloads:**
            - APK: Direct install for Android devices
            - AAB: Google Play Store format
          files: |
            build/app/outputs/flutter-apk/DockerManager-${{ steps.version.outputs.VERSION_NAME }}.apk
            build/app/outputs/bundle/release/DockerManager-${{ steps.version.outputs.VERSION_NAME }}.aab
          generate_release_notes: true
          
      # --- Custom APK Manager Upload (APK only) ---
      - name: Upload APK to APK Manager
        run: |
          echo "Uploading APK to APK Manager..."
          curl -v -X POST \
            -H "X-Secret-Key: ${APK_MANAGER_SECRET_KEY}" \
            -F "file=@build/app/outputs/flutter-apk/DockerManager-${{ steps.version.outputs.VERSION_NAME }}.apk" \
            https://apkmanager.1110777.xyz/docker-manager/upload